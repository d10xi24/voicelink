$(function(){let device;let accessToken;let identity;let ongoingCall=!1;let endCallButtonEnabled=!1;const callButton=document.getElementById("call");const endCallButton=document.getElementById("end-call");const phoneInput=document.getElementById("input");const status=document.getElementById("status");const Callduration=document.getElementById("timer");const updateAudioDevicesButton=document.getElementById("get-devices");const inputVolume=document.getElementById("input-volume");const outputVolume=document.getElementById("output-volume");const iti=window.intlTelInput(phoneInput,{initialCountry:"auto",separateDialCode:!0,utilsScript:"/utils.js",});iti.promise.then(function(){phoneInput.on("countrychange",function(){var selectedCountry=iti.getSelectedCountryData();var countryCode=selectedCountry.dialCode;iti.setNumber("+"+countryCode)})});callButton.addEventListener("click",function(e){e.preventDefault();makeOutgoingCall()});endCallButton.addEventListener("click",endCall);updateAudioDevicesButton.onclick=updateAudioDevices;async function makeOutgoingCall(){var params={To:iti.getNumber(),};if(device){status.innerHTML=`Calling ${encodeForHTML(params.To)}`;try{const call=await device.connect({params});call.on("accept",updateUIAcceptedOutgoingCall);call.on("disconnect",updateUIDisconnectedOutgoingCall);call.on("cancel",updateUIDisconnectedOutgoingCall);endCallButton.onclick=()=>{call.disconnect();stopCallTimer()}}catch(error){console.log("Error making outgoing call: "+error.message)}}else{status.innerHTML="An error occurred"}}
function encodeForHTML(input){const temp=document.createElement("div");temp.textContent=input;return temp.innerHTML}
async function startCallTimer(call){startTime=new Date().getTime();callTimerInterval=setInterval(updateCallDuration,1000)}
function updateCallDuration(){const currentTime=new Date().getTime();const elapsedTime=currentTime-startTime;const seconds=Math.floor(elapsedTime/1000);const formattedTime=new Date(seconds*1000).toISOString().substring(11,19);Callduration.innerHTML=`<h4>${formattedTime}</h4>`}
function stopCallTimer(){clearInterval(callTimerInterval);const callDuration=Callduration.innerHTML;Callduration.innerHTML=callDuration;setTimeout(()=>{Callduration.innerHTML=""},5000)}
function updateUIAcceptedOutgoingCall(call){status.innerHTML="Call in progress...";startCallTimer(call);callButton.disabled=!0;bindVolumeIndicators()}
function updateUIDisconnectedOutgoingCall(){callButton.disabled=!1;status.innerHTML="Call disconnected.";setTimeout(()=>{status.innerHTML=""},3000);stopCallTimer();stopVolumeAnimation()}
function handleIncomingCall(call){console.log(`Incoming call from ${call.parameters.From}`);status.innerHTML=`Incoming call from ${call.parameters.From}.`;endCallButtonEnabled=!0;document.getElementById("call").addEventListener("click",()=>{call.accept();console.log("Accepted incoming call.");status.innerHTML="Call Accepted";updateUIIncomingCall(call,"accepted")});document.getElementById("end-call").addEventListener("click",()=>{if(ongoingCall){call.reject();console.log("Rejected incoming call.");updateUIIncomingCall(call,"rejected")}else{status.innerHTML=""}})}
function updateUIIncomingCall(call,status){if(status==="accepted"){callButton.disabled=!0;endCallButton.disabled=!1;bindVolumeIndicators();startCallTimer();endCallButton.onclick=()=>{call.disconnect();stopCallTimer();stopVolumeAnimation()}}else if(status==="rejected"){status.innerHTML="Call rejected."}else if(status==="incoming"){endCallButton.onclick=()=>{hangupIncomingCall(call)}}}
function hangupIncomingCall(call){call.reject();status.innerHTML="Call rejected";setTimeout(()=>{},3000)}
function endCall(){if(ongoingCall){stopCallTimer();updateButtonStates(!1);endCallButton.disabled=!0;stopVolumeAnimation()}else{status.innerHTML="No ongoing call to end.";setTimeout(()=>{},3000)}}
function updateButtonStates(callOngoing){if(callOngoing){callButton.disabled=!0;if(endCallButtonEnabled){endCallButton.disabled=!1}}else{callButton.disabled=!1;endCallButton.disabled=!0}}
function updateAudioDevices(){if(!device||!device.audio){console.error("Device or audio not supported.");return}else{navigator.mediaDevices.getUserMedia({audio:!0}).then(function(){console.log("Microphone and speaker access granted.")}).catch(function(err){console.error("Error accessing microphone and speaker:",err)})}}
function bindVolumeIndicators(){inputVolume.style.clipPath="inset(0% 0 0 0)";inputVolume.style.webkitClipPath="inset(0% 0 0 0)";inputVolume.style.animation="level-animation 400ms alternate infinite";outputVolume.style.clipPath="inset(0% 0 0 0)";outputVolume.style.webkitClipPath="inset(0% 0 0 0)";outputVolume.style.animation="level-animation 400ms alternate infinite"}
function stopVolumeAnimation(){inputVolume.style.animation="none";outputVolume.style.animation="none"}
function setClientNameUI(clientName){status.innerHTML=`Your client ID: <strong>${clientName}</strong>`;setTimeout(()=>{status.innerHTML=""},25000)}
async function startupClient(){const maxRetries=3;let retries=0;function initialize(){status.innerHTML="Requesting Access Token...";$.getJSON("/token").then(({token,identity:clientName})=>{console.log("Got a token");accessToken=token;identity=clientName;initializeDevice();setClientNameUI(identity);console.log("Your client ID:"+identity);updateAudioDevices()}).catch((error)=>{console.error("An error occurred requesting access token:",error);retries++;if(retries<maxRetries){console.log("Retrying access token request...");setTimeout(initialize,1000)}else{console.error("Exceeded maximum number of access token retries.");status.innerHTML="Failed to retrieve access token."}})}
initialize()}
function initializeDevice(){status.innerHTML="Starting the device";try{device=new Twilio.Device(accessToken,{logLevel:1,codecPreferences:["opus","pcmu"],});addDeviceListeners(device);device.register()}catch(error){handleStartupError(error)}}
function addDeviceListeners(device){device.on("registered",function(){setClientNameUI(identity)});device.on("error",function(error){console.log("Device Error: "+error.message)});device.on("incoming",handleIncomingCall);device.audio.on("deviceChange",updateAudioDevices.bind(device))}
function cleanupAndUnregisterDevice(){if(device){device.disconnectAll();device.unregister()}}
function handleStartupError(error){console.error("An error occurred during startup:",error);cleanupAndUnregisterDevice();status.innerHTML="Trying To reconnect to the server";device.register().then(()=>{status.innerHTML="Device connected and Ready to make and receive calls"}).catch(()=>{status.innerHTML="Sorry, service is not available right now. Try again later"})}
$(document).ready(function(){startupClient()})})